generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  email     String      @unique
  password  String
  avatar    String?
  Category  Category[]
  Expense   Expense[]
  Income    Income[]
  Objective Objective[]
  Planning  Planning[]
  Wallet    Wallet?
}

model Wallet {
  id        String   @id
  createdAt DateTime @default(now())
  value     Float
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Income {
  id          String   @id
  createdAt   DateTime @default(now())
  value       Float
  isReceived  Boolean
  date        DateTime
  description String
  userId      String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Expense {
  id          String   @id
  createdAt   DateTime @default(now())
  value       Float
  isPay       Boolean
  date        DateTime
  description String
  userId      String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Category {
  id                 String               @id
  createdAt          DateTime             @default(now())
  name               String
  type               String
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  Expense            Expense[]
  Income             Income[]
  PlanningByCategory PlanningByCategory[]
}

model Objective {
  id           String   @id
  createdAt    DateTime @default(now())
  isActivated  Boolean  @default(true)
  date         DateTime
  description  String
  goal         Float
  initialValue Float
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  Parcel       Parcel[]
}

model Parcel {
  id          String    @id
  createdAt   DateTime  @default(now())
  isPaid      Boolean   @default(false)
  portion     Int
  value       Float
  month       String
  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
}

model Planning {
  id                 String               @id
  createdAt          DateTime             @default(now())
  month              String
  goal               Float
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlanningByCategory PlanningByCategory[]
}

model PlanningByCategory {
  id         String   @id
  createdAt  DateTime @default(now())
  goal       Float
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  planningId String
  planning   Planning @relation(fields: [planningId], references: [id], onDelete: Cascade)
}
